{"version":3,"sources":["components/display_element.js","components/languages.js","components/currencies.js","components/callingCodes.js","components/zoomed_element.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","to","country_name","className","capital","region","subregion","Languages","options","map","option","key","name","undefined","iso639_1","iso639_2","nativeName","Currency","code","symbol","CallingCodes","Zoomed","state","codes","currencies","languages","axios","get","this","match","params","then","response","setState","data","callingCodes","catch","err","console","log","Component","App","countries","singleCountry","country","exact","path","render","history","changeName","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.88737188.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Display(props) {\n  return (\n    <Link to={`/country/${props.country_name}`} className=\"display-box\">\n      {props.country_name !== \"\" ? (<p>Country Name: {props.country_name}</p>) : (<p>Country Name: N/A</p>)}\n      {props.capital !== \"\" ? (<p>Capital: {props.capital}</p>) : (<p>Capital: N/A</p>)}\n      {props.region !== \"\" ? (<p>Region: {props.region}</p>) : (<p>Region: N/A</p>)}\n      {props.subregion !== \"\" ? (<p>Subregion: {props.subregion}</p>) : (<p>Subregion: N/A</p>)}\n    </Link>\n  );\n}\n\nexport default Display;\n","import React from \"react\";\n\nfunction Languages(props) {\n  return props.options.map(option => {\n    return (\n      <div className=\"mini-container\" key={option.name}>\n        {option.name !== undefined ? (<p>Name: {option.name}</p>) : (<p>N/A</p>)}\n        {option.iso639_1 !== undefined ? (<p>Shortened Version 1: {option.iso639_1}</p>) : (<p>N/A</p>)}\n        {option.iso639_2 !== undefined ? (<p>Shortened Version 2: {option.iso639_2}</p>) : (<p>N/A</p>)}\n        {option.nativeName !== undefined ? (<p>Native Name: {option.nativeName}</p>) : (<p>N/A</p>)}\n      </div>\n    );\n  });\n}\n\nexport default Languages;\n","import React from \"react\";\n\nfunction Currency(props) {\n  return props.options.map(option => {\n    return (\n      <div className=\"mini-container\" key={option.name}>\n        {option.code !== undefined ? (<p>Code: {option.code}</p>) : (<p>N/A</p>)}\n        {option.name !== undefined ? (<p>Name: {option.name}</p>) : (<p>N/A</p>)}\n        {option.symbol !== undefined ? (<p>Symbol: {option.symbol}</p>) : (<p>N/A</p>)}\n      </div>\n    );\n  });\n}\n\nexport default Currency;\n","import React from \"react\";\n\nfunction CallingCodes(props) {\n  return props.options.map(option => {\n    return (\n      <div className=\"mini-container\" key={option}>\n        {option !== \"\" ? (<p>{option}</p>) : (<p>N/A</p>)}\n      </div>\n    );\n  });\n}\n\nexport default CallingCodes;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\n\nimport Languages from \"./languages\";\nimport Currency from \"./currencies\";\nimport CallingCodes from \"./callingCodes\";\n\nclass Zoomed extends Component {\n  constructor() {\n    super();\n    this.state = {\n      codes: [],\n      currencies: [],\n      languages: []\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get(\n        `https://restcountries.eu/rest/v2/name/${this.props.match.params.name}`\n      )\n      .then(response => {\n        this.setState({\n          codes: response.data[0].callingCodes,\n          currencies: response.data[0].currencies,\n          languages: response.data[0].languages\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  render() {\n    return (\n      <>\n        <Link to=\"/\">Back</Link>\n        <div className=\"display-box\">\n          <h4>Calling Code</h4>\n          <CallingCodes options={this.state.codes} />\n        </div>\n        <div className=\"display-box\">\n          <h4>Languages</h4>\n          <Languages options={this.state.languages} />\n        </div>\n        <div className=\"display-box\">\n          <h4>Currencies</h4>\n          <Currency options={this.state.currencies} />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Zoomed;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Display from \"./components/display_element.js\";\nimport Zoomed from \"./components/zoomed_element\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      countries: [],\n      singleCountry: {}\n    };\n  }\n\n  componentDidMount() {\n    axios\n      .get(\"https://restcountries.eu/rest/v2/all\")\n      .then(response => {\n        console.log(response);\n        this.setState({ countries: response.data });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          {this.state.countries.map(country => {\n            return (\n              <Route\n                exact\n                path=\"/\"\n                key={country.name}\n                render={props => (\n                  <Display\n                    history={this.props.history}\n                    country_name={country.name}\n                    capital={country.capital}\n                    region={country.region}\n                    subregion={country.subregion}\n                    changeName={this.changeName}\n                  />\n                )}\n              />\n            );\n          })}\n          <Route\n            path=\"/country/:name\"\n            render={props => <Zoomed {...props} />}\n          />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <App />,\ndocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}